#=================================================  
# https://github.com/P3TERX/Actions-OpenWrt  
# 描述: 使用 GitHub Actions 构建 OpenWrt  
# 许可证: MIT  
# 作者: P3TERX  
# 博客: https://p3terx.com  
#=================================================  

name: Openwrt-AutoBuild  

on:   
  workflow_dispatch:  
  schedule:
    - cron: "15 2 1/3 * *"
  watch:
    types: started

permissions:  
  contents: read  

env:  
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  
  SCKEY: ${{ secrets.SCKEY }}  
  PAT: ${{ secrets.PAT }}  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  
  TZ: Asia/Shanghai  

jobs:  
  build_openwrt:  
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id  
    runs-on: ubuntu-latest  
    
    name: 构建 ${{ matrix.target }}  
    strategy:  
      fail-fast: false  
      matrix:  
        target: [lede-x86-64,immortalwrt-x86-64]  
        
    steps:  
    - name: 检出代码  
      uses: actions/checkout@main  
      with:  
          fetch-depth: 0  
  
    - name: 配置环境变量  
      run: |  
        sudo timedatectl set-timezone "Asia/Shanghai"  
        echo "FILE_NAME=${{ matrix.target }}" >> $GITHUB_ENV   
        echo "REPO_NAME=$(basename "${{ matrix.target }}" | awk -F'-' '{print $1}')" >> $GITHUB_ENV  
        echo "ARCH_NAME=$(basename "${{ matrix.target }}" | sed -E 's/^[^-]*-//')" >> $GITHUB_ENV  
        echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_ENV  
  
    - name: 加载 Settings.ini  
      run: |  
        # 加载公共配置  
        source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/common/settings.ini"  
        # 如果存在架构特定的配置，则加载  
        if [ -f "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini" ]; then  
          source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini"  
        fi  
        # 从配置文件中设置环境变量  
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV  
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV  
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV  
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV  
        echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV  
        echo "UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT=${UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV  
    
    - name: 加载环境  
      env:  
          DEBIAN_FRONTEND: noninteractive  
      run: |  
          # 安装必要的软件包  
          sudo -E apt-get -qq update  
          sudo -E apt-get -qq install build-essential clang llvm flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
          libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
          libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev pigz  
          # 移除不必要的包，清理空间  
          sudo -E apt-get -qq purge azure-cli ghc* zulu* firefox powershell openjdk* dotnet* google* mysql* php* android*  
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc  
          sudo -E apt-get -qq autoremove --purge  
          sudo -E apt-get -qq clean  
          df -h  
    
    - name: 克隆源代码  
      run: |  
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt  
    
    - name: 加载与更新 feeds  
      run: |  
        [ -n "$(ls -A "${{ env.REPO_NAME }}/common/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/common/files/"* openwrt/
        cd openwrt  
        [ "${{ env.REPO_NAME }}" = "openwrt" ] && sed -i "/src-git vi /d; 1 i src-git vi https://github.com/vison-v/packages;${{ env.REPO_NAME }}" feeds.conf.default  		  
        ./scripts/feeds update -a  
        ./scripts/feeds install -a  
        if [ "${{ env.REPO_NAME }}" = "openwrt" ]; then  
          ./scripts/feeds uninstall $(grep Package ./feeds/vi.index | awk -F': ' '{print $2}')  
          ./scripts/feeds install -p vi -a  
        fi  

    - name: 清理磁盘空间  
      env:  
        DEBIAN_FRONTEND: noninteractive  
      run: |  
        # 创建目录以释放磁盘空间  
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir /mnt/openwrt/build_dir  
        ln -sf /mnt/openwrt/dl openwrt/dl  
        ln -sf /mnt/openwrt/bin openwrt/bin  
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir  
        ln -sf /mnt/openwrt/build_dir openwrt/build_dir  
    
    - name: 加载自定义配置  
      run: |  
        cp -rf ${{ env.REPO_NAME }} openwrt/  
        cd openwrt  
        chmod +x ${{ env.REPO_NAME }}/common/$COMMON_SH  
        /bin/bash "${{ env.REPO_NAME }}/common/$COMMON_SH"   # 执行通用脚本  
        # 执行架构特定的脚本  
        if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH" ]; then  
          chmod +x ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH  
          /bin/bash "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH"  
        fi  
        mv ${{ env.REPO_NAME }}/common/$CONFIG_FILE .config  # 移动配置文件  
        # 如果存在架构特定的配置文件，则追加内容  
        if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE" ]; then  
          echo >> .config  
          cat ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE >> .config  
        fi  
    
    - name: 应用补丁  
      run: |  
        cd openwrt  
        # 应用通用补丁  
        if [ "$(find "${{ env.REPO_NAME }}/common/patches" -type f -name '*.patch' -print -quit)" ]; then  
          find "${{ env.REPO_NAME }}/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi  
        # 如果存在架构特定的补丁，亦将其应用  
        if [ -n "$(ls -A "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" 2>/dev/null)" ]; then  
          find "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"  
        fi  

    - name: 下载软件包  
      id: package  
      run: |  
        cd openwrt  
        make defconfig  
        make download -j16  
        df -h  
    
    - name: 编译固件  
      id: compile  
      run: | 
        set -e
        cd openwrt  
        echo -e "用 $(($(nproc)+1)) 线程编译${{ matrix.target }}......"  
        make -j$(($(nproc)+1)) || make -j1 V=s > make_output.log 2> ${{matrix.target}}_make_error.log  
        echo "=============================================="  
        echo "空间使用情况:"  
        echo "=============================================="  
        df -h  
        echo "=============================================="  
        if [ $? -ne 0 ]; then  
          echo "BUILD_STATUS=failed" >> $GITHUB_ENV   # 失败时设置状态变量  
          echo "${{matrix.target}} 固件构建失败!"  
          echo "${{matrix.target}} 构建错误日志:"  
          cat ${{matrix.target}}_make_error.log  
          exit 1    
        else  
          echo "BUILD_STATUS=success" >> $GITHUB_ENV  # 成功时设置状态变量  
          echo "${{matrix.target}} 固件构建成功!"   
          echo "=============================================="  
          ls bin/targets/*/*  
          echo "=============================================="  
        fi

    # 组织文件  
    - name: 组织文件  
      continue-on-error: true  
      if: ${{ env.BUILD_STATUS == 'success' }}  
      id: organize  
      run: |  
        # 创建 firmware 目录（如果目录不存在）  
        mkdir -p firmware  
        # 删除并复制文件到 firmware 目录   
        find openwrt/bin/targets/ \( -type d -name "packages" -o -name "*buildinfo" -o -name "*json" -o -name "*txt" -o -name "*manifest" \) -exec rm -rf {} + 2>/dev/null  
        find openwrt/bin/targets/ -type f -exec cp -f {} ./firmware/ \; 2>/dev/null  
        find openwrt/ -type f -name "*_error.log" -exec cp {} ./firmware/ \; 2>/dev/null
        # 检查固件文件是否存在  
        if [ -n "$(find ./firmware/ -type f -print -quit)" ]; then  
          cp -rf openwrt/${{ env.REPO_NAME }}/release ./firmware  
          # 如果文件存在  
          cd firmware  
          # 压缩文件减小体积
          for file in *; do tar -czf "$file.tar.gz" "$file" && [ -f "$file" ] && rm -f "$file"; done
          # 解压缩文件
          tar -xzf sha256sums.tar.gz && tar -xzf release.tar.gz && rm -f {sha256sums.tar.gz,release.tar.gz}  
          echo "FIRMWARE_STATUS=true" >> $GITHUB_ENV                                   # 设置状态为 found  
          # 检查各类固件文件存在性并设置环境变量  
          [ -n "$(find . -name '*_error.log' -print -quit)" ] && echo "LOG=true" >> $GITHUB_ENV 
          [ -n "$(find . -name '*image.iso' -print -quit)" ] && echo "ISO=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*sysupgrade.bin' -print -quit)" ] && echo "BIN=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*combined-efi.img.gz' -print -quit)" ] && echo "EFI=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*combined.img.gz' -print -quit)" ] && echo "COMBINED=true" >> $GITHUB_ENV  
          ls                                                                           # 列出文件以供调试  
        else  
          echo "未找到文件."  
        fi

    # 上传固件到 Release  
    - name: 上传固件到 Release   
      uses: softprops/action-gh-release@v2  
      id: uprelease  
      continue-on-error: true
      if: ${{ env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && env.FIRMWARE_STATUS == 'true' }}
      env:  
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}                          # 使用密钥进行身份验证  
      with:  
        files: firmware/*                                                # 要上传的文件  
        name: ${{ env.date }}-${{matrix.target}}                         # Release 的名称  
        tag_name: ${{ env.date }}-${{matrix.target}}                     # 标记名称  
        body_path: firmware/release                                      # Release 描述文件  

    - name: 添加 Release 状态  
      continue-on-error: true
      if: ${{ steps.uprelease.outcome == 'success' }}                    # 当 Release 步骤成功时执行  
      run: |  
        echo "RELEASE=true" >> $GITHUB_ENV                               # 设置环境变量 RELEASE 成功为true
    
    # 上传固件到 Artifact  
    - name: 上传固件到 Artifact   
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true' && env.COMBINED == 'true' }}
      with:  
        name: ${{ env.date }}-${{matrix.target}}   
        path: firmware/*combined.img.gz

    # 上传 EFI 固到 Artifact  
    - name: 上传 EFI 固到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true' && env.EFI == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_EFI   
        path: firmware/*combined-efi.img.gz    

    # 上传 BIN 固到 Artifact  
    - name: 上传 BIN 固到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT == 'true' && env.BIN == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_BIN   
        path: firmware/*sysupgrade.bin  

    # 上传 ISO 固件到 Artifact  
    - name: 上传 ISO 固件到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true' && env.ISO == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_ISO  
        path: firmware/*image.iso   

    # 上传make错误日志到 Artifact  
    - name: 上传错误日志到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.LOG == 'true' }}  
      with:  
        name: ${{matrix.target}}_make_error           # 设置上传文件的名称  
        path: firmware/*make_error.log                # 上传的错误日志文件路径  

    # 微信通知  
    - name: 微信通知  
      if: env.SCKEY                                   # 如果已设置 SCKEY 则发送通知  
      run: |  
        if [ "${{ env.COMBINED }}" == 'true' ] || [ "${{ env.EFI }}" == 'true' ] || [ "${{ env.BIN }}" == 'true' ] || [ "${{ env.ISO }}" == 'true' || "${{ env.RELEASE }}" == 'true' ]; then  
          curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=固件${{ env.date }}-${{matrix.target}}编译完成😋  
        else  
          curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=固件${{ env.date }}-${{matrix.target}}编译失败😭  
        fi  

    # Telegram 通知  
    - name: Telegram 通知  
      if: env.TELEGRAM_TOKEN                          # 如果已设置 Telegram 令牌则发送通知  
      run: |  
       if [ "${{ env.COMBINED }}" == 'true' ] || [ "${{ env.EFI }}" == 'true' ] || [ "${{ env.BIN }}" == 'true' ] || [ "${{ env.ISO }}" == 'true' || "${{ env.RELEASE }}" == 'true' ]; then  
         message="固件${{ env.date }}-${{ matrix.target }}编译完成😋"  
       else  
         message="固件${{ env.date }}-${{ matrix.target }}编译失败😭"  
       fi  
       curl -k --data "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${message}" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    # 删除工作流运行记录  
    - name: 删除工作流运行记录  
      uses: Mattraks/delete-workflow-runs@main  
      with:  
        token: ${{ secrets.PAT }}                     # 使用 PAT 进行身份验证  
        retain_days: 2                                # 保留最近 2 天的记录  
        keep_minimum_runs: 1                          # 保留至少 1 次运行记录  

    # 删除旧的 Releases  
    - name: 删除旧的 Releases  
      uses: dev-drprasad/delete-older-releases@master  
      continue-on-error: true
      if: ${{ env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' }}   # 仅在允许上传时执行  
      with:  
        keep_latest: 15                                      # 保留最新的 15 个发布  
        delete_tags: true                                    # 删除标签  
      env:  
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}              # 使用 GitHub 令牌
