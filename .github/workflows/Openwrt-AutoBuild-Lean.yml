#=================================================
# https://github.com/P3TERX/Actions-OpenWrt.
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Openwrt-AutoBuild-Lean

on: 
  schedule:
    - cron: 0 22 * * *
  push:
    paths:
      - '.github/workflows/Openwrt-AutoBuild-Lean.yml'

permissions:
  contents: read

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PAT: ${{ secrets.PAT }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TZ: Asia/Shanghai

jobs:
  build_openwrt:

    name: Build ${{matrix.target}}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target: [x86_64]
        
    steps:
    
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0
    
    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/Lean/common/settings.ini"
        if [ -f "Lean/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/Lean/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "DIY_SH=${DIY_SH}" >> $GITHUB_ENV
        echo "ADD_SH=${ADD_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_IPK_FOR_ARTIFACT=${UPLOAD_IPK_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
        if [ ${{matrix.target}} == "x86_64" ]; then
            echo "ARCH=linux/amd64" >> $GITHUB_ENV
            echo "MTARGET=x86_64" >> $GITHUB_ENV
        elif [ ${{matrix.target}} == "AC58U" ]; then
            echo "MTARGET=AC58U" >> $GITHUB_ENV
        fi    

    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%m/%d_%Y_%H/%M')" >> $GITHUB_ENV
        echo "date2=$(date +'%m/%d %Y')" >> $GITHUB_ENV
        echo "date3=$(date +'%m.%d')" >> $GITHUB_ENV
        echo "date4=$(date +'%m.%d.%Y')" >> $GITHUB_ENV
    
    - name: Initialization environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang llvm flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
          libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
          libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev
          sudo -E apt-get -qq purge azure-cli ghc* zulu* firefox powershell openjdk* dotnet* google* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h
    
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Load && Update feeds
      run: |
        cp -rf Lean/common/files/. openwrt/
        cd openwrt
        ./scripts/feeds update -a

    - name: Free up disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir 
    
    - name: Load custom configuration
      run: |
        cp -rf Lean openwrt/
        cd openwrt
        chmod +x Lean/common/$ADD_SH
        /bin/bash "Lean/common/$ADD_SH"
        if [ -f "Lean/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x Lean/${{matrix.target}}/$DIY_SH
          /bin/bash "Lean/${{matrix.target}}/$DIY_SH"
        fi
        mv Lean/common/$CONFIG_FILE .config
        if [ -f "Lean/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat Lean/${{matrix.target}}/$CONFIG_FILE >> .config
        fi
        df -hT
    
    - name: Apply patches
      run: |
        cd openwrt
        find "Lean/common/patches" -type f ! -path 'Lean/common/patches/china_mirrors.patch' -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        if [ -n "$(ls -A "Lean/${{matrix.target}}/patches" 2>/dev/null)" ]; then
          find "Lean/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi

    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j16
        df -hT

    - name: Cache
      uses: stupidloud/cachewrtbuild@main
      with:
        ccache: 'true'
        mixkey: ${{ matrix.target }}
        clean: ${{ contains(github.event.action, 'nocache') }}
        prefix: ${{ github.workspace }}/openwrt
    
    - name: Check space usage
      run: |
        shopt -s extglob
        cd openwrt
        if [[ -f staging_dir/*${{ env.MTARGET }}*/bin ]]; then
            rm -rf staging_dir/!(*${{ env.MTARGET }}*|host|hostpkg) build_dir/!(*${{ env.MTARGET }}*|host|hostpkg)
        fi
        df -hT

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        rm -rf staging_dir/toolchain-*/bin/*openwrt-linux-musl-lto-dump
        rm -rf staging_dir/toolchain-*/initial
        df -hT
      
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}
        path: openwrt/bin

    - name: Organize files
      id: organize
      run: |
        mkdir ipk-package && find openwrt/bin/packages/*/*/ -maxdepth 1 \
        -name "*ddns*.ipk" \
        -or -name "*adguardhome*.ipk" \
        -or -name "*AdGuard*.ipk" \
        -or -name "*smartdns*.ipk" \
        -or -name "*kodexplorer*.ipk" \
        -or -name "*tcpdump*.ipk" \
        -or -name "*koolproxyR*.ipk" \
        -or -name "*socat*.ipk" \
        -or -name "*watchcat*.ipk" \
        -or -name "*dnsfilter*.ipk" \
        -or -name "*theme*.ipk" \
        -or -name "*wrtbwmon*.ipk" \
        -or -name "*netdata*.ipk" \
        -or -name "*wizard*.ipk" \
        -or -name "*aliyundrive*.ipk" \
        | xargs -i mv -f {} ./ipk-package/
        cd ipk-package
        echo "IPK-PACKAGE=$PWD" >> $GITHUB_ENV
        
        cd ..
        mkdir vssr-ssr-bypass-passwall-openclash && find openwrt/bin/packages/*/*/ -maxdepth 1 \
        -name "*openclash*.ipk" \
        -or -name "*passwall*.ipk" \
        -or -name "*vssr*.ipk" \
        -or -name "*ssr-plus*.ipk" \
        -or -name "*bypass*.ipk" \
        | xargs -i mv -f {} ./vssr-ssr-bypass-passwall-openclash/
        cd vssr-ssr-bypass-passwall-openclash
        echo "Dependency=$PWD" >> $GITHUB_ENV
        
        cd ..
        mkdir firmware && find openwrt/bin/targets/*/*/ -maxdepth 1 \
        -name "*combined*" \
        -or -name "*sysupgrade*" \
        -or -name "*armvirt-64-default-rootfs*" \
        -or -name "sha256sums" \
        | xargs -i mv -f {} ./firmware/
        cp openwrt/.config  ./firmware/${{matrix.target}}.config
        cd firmware
        echo ${{ env.date4 }} > version.txt
        mv sha256sums ${{matrix.target}}_sha256sums
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Create release
      id: create_release
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      continue-on-error: true
      run: |
        echo -e "墙内加速下载 🚀:\n" >> release.txt

    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date2 }} ${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: release.txt

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}
        path: |
          ${{ env.FIRMWARE }}/*squashfs*
          !${{ env.FIRMWARE }}/*efi*
          !${{ env.FIRMWARE }}/*rootfs*
    
    - name: Upload EFI firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}_EFI
        path: ${{ env.FIRMWARE }}/*efi*
        
    - name: Upload ISO firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}}_ISO
        path: ${{ env.FIRMWARE }}/*.iso
    
    - name: Upload ipk-package for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_IPK_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}} IPK
        path: |
          ${{ env.IPK-PACKAGE }}/
    
    - name: Upload ipk-package for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_IPK_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date3 }} ${{matrix.target}} vssr-ssr-bypass-passwall-openclash
        path: |
          ${{ env.Dependency }}/
    
    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt_${{ env.date3 }}_${{matrix.target}}_Lean编译完成

    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=OpenWrt_${{ env.date3 }}_${{matrix.target}}_Lean编译完成😋  ${{ env.COWURL }}   ${{ env.WETRANS }} 🚀" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.PAT }}
        retain_days: 15
        keep_minimum_runs: 1

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@master
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
