# Copyright (C) 2022 Ing <https://github.com/wjz304>. 
# This is free software, licensed under the MIT License.  
# See /LICENSE for more information.  
name: Build OpenWrt  
on:  
  #schedule:  
  #  - cron: "0 18 * * *"  
  push:  
    paths:  
      - '.github/workflows/Lede-openwrt-immortalwrt.yml'  
  workflow_dispatch:  

env:  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  

jobs:  
  matrix:  
    runs-on: ubuntu-latest  
    outputs:  
      release: ${{ steps.set-matrix.outputs.release }}  
      matrix: ${{ steps.set-matrix.outputs.matrix }}  
    steps:  
      - name: Checkout  
        uses: actions/checkout@main  
      
      - name: Generate build matrix  
        id: set-matrix  
        run: |  
          sudo timedatectl set-timezone "Asia/Shanghai"  
          echo "release=$(date +"%Y.%m.%d")" >> $GITHUB_OUTPUT  
          cp -rf Lede-openwrt-immortalwrt/* ./  
          echo "matrix={ \"config\": [ $(echo $(ls -mBQ *.config)) ] }" >> $GITHUB_OUTPUT  

  build:  
    name: Build OpenWrt  
    runs-on: ubuntu-latest  
    needs: matrix  
    env:  
      release: ${{ needs.matrix.outputs.release }}  
    strategy:  
      matrix: ${{ fromJson(needs.matrix.outputs.matrix) }}  
    steps:  
      - name: Checkout  
        uses: actions/checkout@main  
      
      - name: Init Env  
        env:  
          DEBIAN_FRONTEND: noninteractive  
        run: |  
          git config --global user.email "github-actions[bot]@users.noreply.github.com"  
          git config --global user.name "github-actions[bot]"  
          sudo timedatectl set-timezone "Asia/Shanghai"  
          sudo apt update  
          sudo apt full-upgrade -y  
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf npm python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev  
          sudo apt -y autoremove --purge  
          sudo apt -y clean  

          # Clone and build po2lmo  
          git clone --depth=1 https://github.com/openwrt-dev/po2lmo || { echo 'Clone failed'; exit 1; }  
          (cd po2lmo && sudo make && sudo make install)  
          df -h  
      
      - name: make  
        continue-on-error: true   
        run: |  
          sudo mkdir -p /mnt/openwrt  
          sudo cp -rf Lede-openwrt-immortalwrt/* /mnt/openwrt/  
          cd /mnt/openwrt  
          
          # Execute build.sh and handle errors  
          if ! sudo bash build.sh "${{ matrix.config }}"; then  
            echo "Build.sh 对配置"${{ env.FILE_NAME }}执行失败！"  
          else  
            echo "Build.sh 对配置"${{ env.FILE_NAME }}执行成功！"    
          fi  

      - name: 上传日志作为工件  
        if: env.BUILD_STATUS == 'failed'  # 仅在构建失败时上传日志  
        uses: actions/upload-artifact@main  
        continue-on-error: true  
        with:  
          name: ${{ env.FILE_NAME }}_make_error  
          path: |  
            /mnt/openwrt/${{ env.ERROR_LOG_NAME }}  
      
      - name: 上传固件作为工件  
        if: env.BUILD_STATUS == 'success'    
        uses: actions/upload-artifact@main  
        with:  
          name: ${{ env.FILE_NAME }}-${{ env.release }}  
          path: |  
            /mnt/openwrt/*.zip  
      
      - name: 上传固件到发布  
        if: env.BUILD_STATUS == 'success'  
        uses: softprops/action-gh-release@v2  
        env:  
          GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}  
        with:  
          tag_name: ${{ env.release }}  
          files: /mnt/openwrt/*basic*.zip
      
      - name: Telegram notification  
        if: env.TELEGRAM_TOKEN  
        continue-on-error: true  
        run: |  
          if [ ${{ env.BUILD_STATUS }} == 'success' ]; then  
          message="固件${{ env.FILE_NAME }}-${{ env.release }}编译完成😋"  
          else  
          message="固件${{ env.FILE_NAME }}-${{ env.release }}编译失败😭"  
          fi  
          curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${message}" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"

    # Uncomment to keep workflow clean  
    # - name: Delete workflow runs  
    #   uses: Mattraks/delete-workflow-runs@v2  
    #   with:  
    #     retain_days: 1  
    #     keep_minimum_runs: 9  
    # - name: Remove old Releases  
    #   uses: dev-drprasad/delete-older-releases@v0.1.0  
    #   with:  
    #     keep_latest: 9  
    #     delete_tags: true  
    #   env:  
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
