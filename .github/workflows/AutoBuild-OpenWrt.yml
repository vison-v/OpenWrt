name: AutoBuild-OpenWrt
on:
  workflow_dispatch:
  schedule:
    - cron: "5 23 1/2 * *"
  watch:
    types: started
permissions:
  contents: read
env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PAT: ${{ secrets.PAT }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai
jobs:
  build_openwrt:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    runs-on: ubuntu-latest
    name: 构建 ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [lede-x86-64,immortalwrt-x86-64,openwrt-x86-64]
    steps:
    # ========== 初始化阶段 ==========
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: 解析环境变量
      run: |
        echo "REPO_NAME=$(basename "${{ matrix.target }}" | awk -F'-' '{print $1}')" >> $GITHUB_ENV  
        echo "ARCH_NAME=$(basename "${{ matrix.target }}" | sed -E 's/^[^-]*-//')" >> $GITHUB_ENV  
        source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/common/settings.ini"  
        # 如果存在架构特定的配置，则加载  
        if [ -f "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini" ]; then  
          source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini"  
        fi  
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV  
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV  
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV  
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV  
        echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV
        echo "DATE_TAG=$(date +'%Y.%m.%d')" >> $GITHUB_ENV
        
    # ========== 缓存恢复阶段 ==========
    - name: 恢复编译缓存
      id: cache-restore
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/dl_cache
          ${{ github.workspace }}/ccache
        key: ${{ runner.os }}-${{ matrix.target }}-${{ hashFiles(format('{0}/common/config.diff', env.REPO_NAME), format('{0}/{1}/config.diff', env.REPO_NAME, env.ARCH_NAME)) }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-
          ${{ runner.os }}-
    
    # ========== 环境准备阶段 ==========    
    - name: 初始化构建环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo timedatectl set-timezone "Asia/Shanghai"
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          ccache \
          libssl-dev \
          python3-dev \
          moreutils  # 添加时间戳工具
        sudo mkdir -p /usr/local/ccache
        echo "max_size = 10G" | sudo tee /usr/local/ccache/ccache.conf
        echo "PATH=$PATH:/usr/lib/ccache" >> $GITHUB_ENV

    # ========== 源码处理阶段 ==========    
    - name: 克隆源代码
      run: |
        git clone --depth 1 "$REPO_URL" -b "$REPO_BRANCH" "${GITHUB_WORKSPACE}/${REPO_NAME}"
        
    - name: 配置符号链接
      run: |
        mkdir -p "${GITHUB_WORKSPACE}/tmp_cache"
        ln -sfT "${GITHUB_WORKSPACE}/dl_cache" "${REPO_NAME}/dl"
        ln -sfT "${GITHUB_WORKSPACE}/ccache" "${REPO_NAME}/ccache"
        ln -sfT "${GITHUB_WORKSPACE}/tmp_cache" "${REPO_NAME}/build_dir"

    # ========== 配置处理阶段 ==========    
    - name: 加载自定义配置
      run: |
        # 复制通用配置文件
        cp -rv "${REPO_NAME}/common/files/." "${GITHUB_WORKSPACE}/${REPO_NAME}/" || true
        # 复制架构特定文件
        [ -d "${REPO_NAME}/${ARCH_NAME}/files" ] && \
          cp -rv "${REPO_NAME}/${ARCH_NAME}/files/." "${GITHUB_WORKSPACE}/${REPO_NAME}/"
          
        # 配置feeds
        cd "${REPO_NAME}"
        echo "src-git vi https://github.com/vison-v/packages;${REPO_NAME}" >> feeds.conf.default
        ./scripts/feeds update -a
        [ -x "${REPO_NAME}/common/feeds-vi.sh" ] && \
          "${REPO_NAME}/common/feeds-vi.sh"
        ./scripts/feeds install -a --force-overwrite

        # 通用脚本处理
        if [[ -n "${COMMON_SH}" && -f "common/${COMMON_SH}" ]]; then
          echo "::group::🏗️ 执行通用自定义脚本：common/${COMMON_SH}"
          chmod +x "common/${COMMON_SH}"
          SANITIZED_PATH=$(echo "common/${COMMON_SH}" | sed 's/\\/\\\\/g; s/"/\\"/g')
          echo "执行路径: ${SANITIZED_PATH}"
          bash "common/${COMMON_SH}"
          echo "::endgroup::"
        fi
        
        # 架构脚本处理
        if [[ -n "${CUSTOM_SH}" && -f "${ARCH_NAME}/${CUSTOM_SH}" ]]; then
          echo "::group::🏭 执行架构自定义脚本：${ARCH_NAME}/${CUSTOM_SH}"
          chmod +x "${ARCH_NAME}/${CUSTOM_SH}"
          SANITIZED_PATH=$(echo "${ARCH_NAME}/${CUSTOM_SH}" | sed 's/\\/\\\\/g; s/"/\\"/g')
          echo "执行路径: ${SANITIZED_PATH}"
          bash "${ARCH_NAME}/${CUSTOM_SH}"
          echo "::endgroup::"
        fi
        
    - name: 生成配置文件
      run: |
        cd "${REPO_NAME}"
        # 合并配置文件
        cat "${REPO_NAME}/common/config.diff" > .config
        [ -f "${REPO_NAME}/${ARCH_NAME}/config.diff" ] && \
          cat "${REPO_NAME}/${ARCH_NAME}/config.diff" >> .config
        make defconfig

    # ========== 编译阶段 ==========    
    - name: 下载依赖项
      if: ${{ steps.cache-restore.outputs.cache-hit != 'true' }}
      run: |
        cd "${REPO_NAME}"
        make download -j$(nproc) CHECK_CERTIFICATE=1
        
    - name: 执行编译
      id: compile
      run: |
        cd "${REPO_NAME}"
        echo "::group::多线程编译日志（V=s级别）"
        if ! make -j$(($(nproc)+1)) V=s 2>&1 | ts '[%Y-%m-%d %H:%M:%S]'; then
          echo "::endgroup::"
          echo "::warning::多线程编译失败，启用单线程调试模式..."
          echo "::group::单线程详细日志（V=sc级别）"
          make -j1 V=sc 2>&1 | ts '[FAILURE] ' > "${GITHUB_WORKSPACE}/firmware/${REPO_NAME}_${ARCH_NAME}_error.log"
          echo "::endgroup::"
          echo "BUILD_STATUS=failed" >> $GITHUB_ENV
          exit 1
        else
          echo "::endgroup::"
          echo "BUILD_STATUS=success" >> $GITHUB_ENV
        fi
        
        echo "::notice::存储空间使用情况"
        df -h | grep -E 'Filesystem|% Used'

    # ========== 产物处理阶段 ==========    
    - name: 整理编译产物
      if: ${{ env.BUILD_STATUS == 'success' }}
      run: |
        mkdir -p firmware
        find "${REPO_NAME}/bin/targets" \
          -type \( -name "*.img.gz" -o -name "*.bin" -o -name "*.iso" \) \
          -exec cp -v {} firmware/ \;
        cd firmware
        sha256sum * > sha256sums.txt
        echo "固件版本: ${{ env.DATE_TAG }}" > release.md

    # ========== 发布阶段 ==========    
    - name: 发布到GitHub Releases
      uses: softprops/action-gh-release@v2
      if: ${{ env.BUILD_STATUS == 'success' && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' }}
      with:
        files: |
          firmware/*
        tag_name: "${{ env.DATE_TAG }}-${{ matrix.target }}-${GITHUB_RUN_ID}"
        name: "${{ env.DATE_TAG }} ${{ matrix.target }} Build"
        body_path: firmware/release.md

    # ========== 通知阶段 ==========    
    - name: 推送Telegram通知
      if: ${{ env.TELEGRAM_TOKEN }}
      env:
        BUILD_RESULT: ${{ env.BUILD_STATUS }}
      run: |
        if [ "$BUILD_RESULT" = "success" ]; then
          MSG="✅ *${{ matrix.target }} 编译成功*  
          ⏱ 完成时间: $(date +'%Y-%m-%d %T')  
          🔗 下载地址: https://github.com/$GITHUB_REPOSITORY/releases/tag/${{ env.DATE_TAG }}-${{ matrix.target }}-${GITHUB_RUN_ID}"
        else
          ERROR_LOG=$(tail -n 50 "${{ github.workspace }}/firmware/${REPO_NAME}_${ARCH_NAME}_error.log" | sed 's/"/\\"/g')
          MSG="❌ *${{ matrix.target }} 编译失败*  
          🕒 失败时间: $(date +'%Y-%m-%d %T')  
          📄 错误日志摘要:  
          \`\`\`
          $ERROR_LOG
          \`\`\`"
        fi
        
        curl -sS -X POST "https://api.telegram.org/bot${{ env.TELEGRAM_TOKEN }}/sendMessage" \
          -d chat_id="${{ env.TELEGRAM_CHAT_ID }}" \
          -d text="$MSG" \
          -d parse_mode="MarkdownV2" \
          -d disable_web_page_preview=true

    # ========== 清理阶段 ==========    
    - name: 清理旧版本发布
      uses: dev-drprasad/delete-older-releases@master
      if: ${{ github.event_name == 'schedule' }}
      with:
        keep_latest: 15
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
