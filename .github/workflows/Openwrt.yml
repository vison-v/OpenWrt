#=================================================  
# https://github.com/P3TERX/Actions-OpenWrt  
# 描述: 使用 GitHub Actions 构建 OpenWrt  
# 许可证: MIT  
# 作者: P3TERX  
# 博客: https://p3terx.com  
#=================================================  

name: AutoBuild  

on:   
  workflow_dispatch:  
  schedule:
    - cron: "5 23 1/2 * *"
  watch:
    types: started

permissions:  
  contents: read  

env:  
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  
  SCKEY: ${{ secrets.SCKEY }}  
  PAT: ${{ secrets.PAT }}  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  
  TZ: Asia/Shanghai  
  CACHE_VERSION: v1

jobs:  
  build_openwrt:  
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id  
    runs-on: ubuntu-latest  
    
    name: 构建 ${{ matrix.target }}  
    strategy:  
      fail-fast: false  
      matrix:  
        target: [lede-x86-64,immortalwrt-x86-64]  
        
    steps:  
    - name: 检出代码  
      uses: actions/checkout@main  
      with:  
          fetch-depth: 0  
  
    - name: 配置环境变量  
      run: |  
        echo "FILE_NAME=${{ matrix.target }}" >> $GITHUB_ENV   
        echo "REPO_NAME=$(basename "${{ matrix.target }}" | awk -F'-' '{print $1}')" >> $GITHUB_ENV  
        echo "ARCH_NAME=$(basename "${{ matrix.target }}" | sed -E 's/^[^-]*-//')" >> $GITHUB_ENV  
        echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_ENV  
  
    - name: 加载 Settings.ini  
      run: |  
        # 加载公共配置  
        source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/common/settings.ini"  
        # 如果存在架构特定的配置，则加载  
        if [ -f "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini" ]; then  
          source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini"  
        fi  
        # 从配置文件中设置环境变量  
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV  
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV  
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV  
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV  
        echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV  
        echo "UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT=${UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV  
    
    - name: 加载环境  
      env:  
          DEBIAN_FRONTEND: noninteractive  
      run: |  
          # 安装必要的软件包  
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          sudo timedatectl set-timezone "Asia/Shanghai"

          sudo apt update
          sudo apt full-upgrade -y
          sudo apt install -y ack antlr3 asciidoc autoconf automake autopoint binutils bison build-essential \
          bzip2 ccache cmake cpio curl device-tree-compiler fastjar flex gawk gettext gcc-multilib g++-multilib \
          git gperf haveged help2man intltool libc6-dev-i386 libelf-dev libfuse-dev libglib2.0-dev libgmp3-dev \
          libltdl-dev libmpc-dev libmpfr-dev libncurses5-dev libncursesw5-dev libpython3-dev libreadline-dev \
          libssl-dev libtool lrzsz mkisofs msmtp ninja-build p7zip p7zip-full patch pkgconf npm python3 \
          python3-pyelftools python3-setuptools qemu-utils rsync scons squashfs-tools subversion swig texinfo \
          uglifyjs upx-ucl unzip vim wget xmlto xxd zlib1g-dev  

          sudo apt -y autoremove --purge  
          sudo apt -y clean  

          git clone --depth=1 https://github.com/openwrt-dev/po2lmo  
          (cd po2lmo && sudo make && sudo make install)  
          df -h  
  
    - name: 创建缓存目录  
      env:  
        DEBIAN_FRONTEND: noninteractive  
      run: |  
        # 创建目录以释放磁盘空间  
        sudo mkdir -p -m 777 /mnt/OpenWrt/dl /mnt/OpenWrt/bin /mnt/OpenWrt/staging_dir /mnt/OpenWrt/build_dir  
        
    - name: 缓存下载目录 (dl)
      uses: actions/cache@v3
      with:
        path: /mnt/OpenWrt/dl
        key: ${{ runner.os }}-dl-${{ matrix.target }}-${{ hashFiles('$(GITHUB_WORKSPACE)/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE', '$(GITHUB_WORKSPACE)/${{ env.REPO_NAME }}/common/settings.ini') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-dl-${{ matrix.target }}-

    - name: 缓存工具链 (仅主架构)
      if: env.ARCH_NAME == 'x86-64'
      uses: actions/cache@v3
      with:
        path: /mnt/OpenWrt/staging_dir
        key: ${{ runner.os }}-toolchain-${{ matrix.target }}-${{ hashFiles('$(GITHUB_WORKSPACE)/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE', '$(GITHUB_WORKSPACE)/${{ env.REPO_NAME }}/common/settings.ini') }}-${{ env.CACHE_VERSION }}
        restore-keys: |
          ${{ runner.os }}-toolchain-${{ matrix.target }}-

    - name: 克隆源代码  
      run: |  
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH OpenWrt  
    
    - name: 链接缓存目录  
      env:  
        DEBIAN_FRONTEND: noninteractive  
      run: |  
        # 创建目录以释放磁盘空间  
        ln -sf /mnt/OpenWrt/dl OpenWrt/dl  
        ln -sf /mnt/OpenWrt/bin OpenWrt/bin  
        ln -sf /mnt/OpenWrt/staging_dir OpenWrt/staging_dir  
        ln -sf /mnt/OpenWrt/build_dir OpenWrt/build_dir  
    
    - name: 加载与更新 feeds  
      run: |  
        [ -n "$(ls -A "${{ env.REPO_NAME }}/common/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/common/files/"* OpenWrt/  
        [ -n "$(ls -A "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/files/"* OpenWrt/  
        cp -rf ${{ env.REPO_NAME }} OpenWrt/
        cd OpenWrt  
        sed -i "/src-git vi /d; \$a src-git vi https://github.com/vison-v/packages;${{ env.REPO_NAME }}" feeds.conf.default  		  
        ./scripts/feeds update -a  
        chmod +x ${{ env.REPO_NAME }}/common/feeds-vi.sh  
        sudo "${{ env.REPO_NAME }}/common/feeds-vi.sh"   
        ./scripts/feeds update -a  
        ./scripts/feeds install -a  

    - name: 加载自定义配置  
      run: |  
        cd OpenWrt  
        # 执行通用脚本 
        if [ -f "${{ env.REPO_NAME }}/common/$COMMON_SH" ]; then  
          chmod +x ${{ env.REPO_NAME }}/common/$COMMON_SH  
          /bin/bash "${{ env.REPO_NAME }}/common/$COMMON_SH"    
        fi
        # 执行架构特定的脚本  
        if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH" ]; then  
          chmod +x ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH  
          /bin/bash "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CUSTOM_SH"  
        fi  
        # 移动配置文件  
        mv ${{ env.REPO_NAME }}/common/$CONFIG_FILE .config  
        # 如果存在架构特定的配置文件，则追加内容  
        if [ -f "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE" ]; then  
          echo >> .config  
          cat ${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/$CONFIG_FILE >> .config  
        fi  
    
    - name: 应用补丁  
      run: |  
        cd OpenWrt  
        # 应用通用补丁  
        if [ -n "$(ls -A "${{ env.REPO_NAME }}/common/patches" 2>/dev/null)" ]; then  
          find "${{ env.REPO_NAME }}/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 --forward"
        fi  
        # 如果存在架构特定的补丁，亦将其应用  
        if [ -n "$(ls -A "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" 2>/dev/null)" ]; then  
          find "${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -B --merge -p1 --forward"  
        fi  
 
    - name: 下载软件包  
      id: package  
      run: |  
        cd OpenWrt  
        make defconfig  
        make download -j16  
        df -h  
    
    - name: 编译固件
      id: compile
      continue-on-error: true
      run: |
        set -e
        # 初始化构建状态
        echo "BUILD_STATUS=unknown" >> $GITHUB_ENV
        # 定义退出处理函数
        cleanup() {
          echo "::endgroup::"
          echo "::group::空间使用情况"
          df -h
          echo "::endgroup::"
          if [ -s ${{ matrix.target }}_make_error.log ]; then
            echo "::error:: ${{ matrix.target }} 固件构建失败!"
            echo "BUILD_STATUS=failed" >> $GITHUB_ENV
            echo "::group::构建错误日志"
            cat ${{ matrix.target }}_make_error.log
            echo "::endgroup::"
          else
            echo "BUILD_STATUS=success" >> $GITHUB_ENV
            echo "::group::生成文件列表"
            ls -R bin/targets/
            echo "::endgroup::"
          fi
        }
        # 捕获退出信号
        trap cleanup EXIT
        cd OpenWrt
        # 设置编译线程数
        THREADS=$(($(nproc) + 1))
        echo "::group::编译 ${{ matrix.target }} (线程数: $THREADS)"       
        # 执行编译并捕获错误
        set +e
        make -j$THREADS 2> >(grep -v "warning" | tee ${{ matrix.target }}_make_error.log >&2)
        MAKE_STATUS=$?
        set -e
        # 失败重试逻辑
        if [ $MAKE_STATUS -ne 0 ]; then
          echo "::warning:: 并行编译失败，尝试单线程编译..."
          make -j1 V=sc 2> >(grep -v "warning" | tee ${{ matrix.target }}_make_error.log >&2)
          MAKE_STATUS=$?
        fi
        cleanup
        exit 0
  
    - name: 清理旧缓存
      if: always()
      run: |
        # 保留最近7天的dl缓存
        find /mnt/OpenWrt/dl -type f -mtime +7 -exec rm -f {} +
        # 非主架构清理工具链
        #if [ "${{ env.ARCH_NAME }}" != "x86-64" ]; then
        rm -rf /mnt/OpenWrt/staging_dir/*
        #fi   

    - name: 存储空间报告
      run: |
        echo "::group::存储使用情况"
        df -h /mnt/OpenWrt
        echo "::endgroup::"  
        echo "::group::缓存目录大小"
        du -sh /mnt/OpenWrt/*
        echo "::endgroup::"

    # 组织文件  
    - name: 组织文件  
      continue-on-error: true  
      id: organize  
      run: |  
        # 创建 firmware 目录（如果目录不存在）  
        mkdir -p firmware  
         [ "${{ env.BUILD_STATUS }}" = "failed" ] && find OpenWrt/ -type f -name "*_error.log" -exec cp {} ./firmware/ \; 2>/dev/null
        # 处理上传文件  
        if [ "${{ env.BUILD_STATUS }}" = "success" ]; then  
          find OpenWrt/bin/targets/ \( -type d -name "packages" -o -name "*buildinfo" -o -name "*json" -o -name "*txt" -o -name "*manifest" \) -exec rm -rf {} + 2>/dev/null  
          find OpenWrt/bin/targets/ -type f -exec cp -f {} ./firmware/ \; 2>/dev/null  
          cp OpenWrt/.config  ./firmware/${{matrix.target}}.config  
          cp OpenWrt/${{ env.REPO_NAME }}/release ./firmware    
          cd firmware  
          # 压缩文件减小体积
          for file in *; do tar -czf "$file.tar.gz" "$file" && [ -f "$file" ] && rm -f "$file"; done
          # 解压缩文件
          tar -xzf sha256sums.tar.gz && tar -xzf release.tar.gz && tar -xzf ${{matrix.target}}.config.tar.gz && rm -f {sha256sums.tar.gz,release.tar.gz,${{matrix.target}}.config.tar.gz}  
          # 设置状态为 true  
          echo "FIRMWARE_STATUS=true" >> $GITHUB_ENV                                   
          # 检查各类固件文件存在性并设置环境变量  
          [ -n "$(find . -name '*image.iso' -print -quit)" ] && echo "ISO=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*sysupgrade.bin' -print -quit)" ] && echo "BIN=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*combined-efi.img.gz' -print -quit)" ] && echo "EFI=true" >> $GITHUB_ENV  
          [ -n "$(find . -name '*combined.img.gz' -print -quit)" ] && echo "COMBINED=true" >> $GITHUB_ENV  
          # 列出文件以供调试  
          ls                                                                           
        else  
          [ -n "$(find . -name '*_error.log' -print -quit)" ] && echo "LOG=true" >> $GITHUB_ENV  
        fi
 
    # 上传固件到 Release  
    - name: 上传固件到 Release   
      uses: softprops/action-gh-release@v2  
      id: uprelease  
      continue-on-error: true
      if: ${{ env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' && env.FIRMWARE_STATUS == 'true' }}
      env:  
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}                          
      with:  
        # 要上传的文件  
        files: firmware/*                                                
        # Release 的名称  
        name: ${{ env.date }}-${{matrix.target}}                         
        # 标记名称  
        tag_name: ${{ env.date }}-${{matrix.target}}                     
        # Release 描述文件  
        body_path: firmware/release                                      

    - name: 添加 Release 状态  
      continue-on-error: true
      # 当 Release 步骤成功时执行  
      if: ${{ steps.uprelease.outcome == 'success' }}                    
      # 设置环境变量 RELEASE 成功为true
      run: |  
        echo "RELEASE=true" >> $GITHUB_ENV                               
    
    # 上传固件到 Artifact  
    - name: 上传固件到 Artifact   
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true' && env.COMBINED == 'true' }}
      with:  
        name: ${{ env.date }}-${{matrix.target}}   
        path: firmware/*combined.img.gz

    # 上传 EFI 固到 Artifact  
    - name: 上传 EFI 固到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true' && env.EFI == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_EFI   
        path: firmware/*combined-efi.img.gz    

    # 上传 BIN 固到 Artifact  
    - name: 上传 BIN 固到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT == 'true' && env.BIN == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_BIN   
        path: firmware/*sysupgrade.bin  

    # 上传 ISO 固件到 Artifact  
    - name: 上传 ISO 固件到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true' && env.ISO == 'true' }}  
      with:  
        name: ${{ env.date }}-${{matrix.target}}_ISO  
        path: firmware/*image.iso   

    # 上传make错误日志到 Artifact  
    - name: 上传错误日志到 Artifact  
      uses: actions/upload-artifact@v4  
      continue-on-error: true
      if: ${{ env.LOG == 'true' }}  
      with:  
        # 设置上传文件的名称  
        name: ${{matrix.target}}_make_error           
        # 上传的错误日志文件路径  
        path: firmware/*make_error.log                

    # 微信通知  
    - name: 微信通知  
      # 如果已设置 SCKEY 则发送通知  
      if: env.SCKEY                                   
      run: |  
        if [ "${{ env.COMBINED }}" == 'true' ] || [ "${{ env.EFI }}" == 'true' ] || [ "${{ env.BIN }}" == 'true' ] || [ "${{ env.ISO }}" == 'true' || "${{ env.RELEASE }}" == 'true' ]; then  
          curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=固件${{ env.date }}-${{matrix.target}}编译完成😋  
        else  
          error_log=$(tail -n 20 firmware/${{matrix.target}}_make_error.log)  
          curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=固件${{ env.date }}-${{matrix.target}}编译失败😭!!! 错误日志: $error_log  
        fi  
  
    # Telegram 通知  
    - name: Telegram 通知  
      # 如果已设置 Telegram 令牌则发送通知  
      if: env.TELEGRAM_TOKEN                          
      run: |  
       if [ "${{ env.COMBINED }}" == 'true' ] || [ "${{ env.EFI }}" == 'true' ] || [ "${{ env.BIN }}" == 'true' ] || [ "${{ env.ISO }}" == 'true' || "${{ env.RELEASE }}" == 'true' ]; then  
         message="固件${{ env.date }}-${{ matrix.target }}编译完成😋"  
       else  
         error_log=$(tail -n 20 firmware/${{matrix.target}}_make_error.log)  
         message="固件${{ env.date }}-${{ matrix.target }}编译失败😭!!! 错误日志: $error_log"  
       fi  
       curl -k --data "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=${message}" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
   
    # 删除工作流运行记录  
    - name: 删除工作流运行记录  
      uses: Mattraks/delete-workflow-runs@main  
      with:  
        token: ${{ secrets.PAT }}    
        # 保留最近 2 天的记录  
        retain_days: 2                                
        # 保留至少 1 次运行记录  
        keep_minimum_runs: 1                          

    # 删除旧的 Releases  
    - name: 删除旧的 Releases  
      uses: dev-drprasad/delete-older-releases@master  
      continue-on-error: true
      # 仅在允许上传时执行  
      if: ${{ env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true' }}   
      with:  
        # 保留最新的 15 个发布  
        keep_latest: 15                                      
        # 删除标签  
        delete_tags: true                                    
      env:  
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}   
