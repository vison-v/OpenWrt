#=================================================  
# https://github.com/P3TERX/Actions-OpenWrt  
# 描述: 使用 GitHub Actions 构建 OpenWrt  
# 许可证: MIT  
# 作者: P3TERX  
# 博客: https://p3terx.com  
#=================================================  

name: test  

on:   
  workflow_dispatch:  
  schedule:
    - cron: "15 2 1/3 * *"
  watch:
    types: started

permissions:  
  contents: read  

env:  
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}  
  SCKEY: ${{ secrets.SCKEY }}  
  PAT: ${{ secrets.PAT }}  
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}  
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}  
  TZ: Asia/Shanghai  

jobs:  
  build_openwrt:  
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id  
    runs-on: ubuntu-latest  
    
    name: 构建 ${{ matrix.target }}  
    strategy:  
      fail-fast: false  
      matrix:  
        target: [lede-x86-64,immortalwrt-x86-64]  
        
    steps:  
    - name: 检出代码  
      uses: actions/checkout@main  
      with:  
          fetch-depth: 0  
  
    - name: 配置环境变量  
      run: |  
        sudo timedatectl set-timezone "Asia/Shanghai"  
        echo "FILE_NAME=${{ matrix.target }}" >> $GITHUB_ENV   
        echo "REPO_NAME=$(basename "${{ matrix.target }}" | awk -F'-' '{print $1}')" >> $GITHUB_ENV  
        echo "ARCH_NAME=$(basename "${{ matrix.target }}" | sed -E 's/^[^-]*-//')" >> $GITHUB_ENV  
        echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_ENV  
  
    - name: 加载 Settings.ini  
      run: |  
        # 加载公共配置  
        source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/common/settings.ini"  
        # 如果存在架构特定的配置，则加载  
        if [ -f "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini" ]; then  
          source "${GITHUB_WORKSPACE}/${{ env.REPO_NAME }}/${{ env.ARCH_NAME }}/settings.ini"  
        fi  
        # 从配置文件中设置环境变量  
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV  
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV  
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV  
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV  
        echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV  
        echo "UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT=${UPLOAD_BIN_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV  
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV  
    
    - name: 加载环境  
      env:  
          DEBIAN_FRONTEND: noninteractive  
      run: |  
          # 安装必要的软件包  
          sudo -E apt-get -qq update  
          sudo -E apt-get -qq install build-essential clang llvm flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3-distutils python3-pyelftools python3-setuptools \
          libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
          libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev pigz  
          # 移除不必要的包，清理空间  
          sudo -E apt-get -qq purge azure-cli ghc* zulu* firefox powershell openjdk* dotnet* google* mysql* php* android*  
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc  
          sudo -E apt-get -qq autoremove --purge  
          sudo -E apt-get -qq clean  
          df -h  
    
    - name: 克隆源代码  
      run: |  
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH OpenWrt  
    
    - name: 加载与更新 feeds  
      run: |  
        [ -n "$(ls -A "${{ env.REPO_NAME }}/common/files/" 2>/dev/null)" ] && cp -rf "${{ env.REPO_NAME }}/common/files/"* OpenWrt/
        cd OpenWrt  
        sed -i "/src-git vi /d; 1 i src-git vi https://github.com/vison-v/packages;${{ env.REPO_NAME }}" feeds.conf.default  		  
        ./scripts/feeds update -a  
        #find ./feeds -path './feeds/vi' -prune -o -type d -exec bash -c 'for dir in $(grep Package ./feeds/vi.index | awk -F": " "{print \$2}"); do [ -d "\$1/\$dir" ] && rm -rf "\$1/\$dir"; done' {} \;  
        base_dir="./feeds/"  

        # 从索引文件中获取所有包的名称  
        packages=$(grep 'Package' "$base_dir/vi.index" | awk -F": " '{print $2}')  

        # 打印提取的包名列表用于调试  
        echo "提取的包名如下："  
        echo "$packages"  

        # 遍历包名，删除对应的目录（排除 ./feeds/vi 目录）  
        for dir in $packages; do  
            full_dir="$base_dir$dir"  
    
            # 打印当前处理的目录用于调试  
            echo "检查目录：$full_dir"  
    
            if [ -d "$full_dir" ]; then  
                echo "目录存在，正在删除：$full_dir"  
                rm -rf "$full_dir"  
        
                # 删除后打印确认信息  
                echo "已删除：$full_dir"  
            else  
                echo "目录不存在：$full_dir"  
            fi  
        done
        ./scripts/feeds install -a  
        
    - name: SSH connection to Actions
      uses: garypang13/debugger-action@master
