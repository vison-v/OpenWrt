#=================================================
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
# Author: P3TERX
# Blog: https://p3terx.com
#=================================================

name: Openwrt-AutoBuild-Immortalwrt

on: 
  workflow_dispatch:
  #schedule:
  #  - cron: 5 1 1/5 * *
  #watch:
  #  types: started

permissions:
  contents: read

env:
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  SCKEY: ${{ secrets.SCKEY }}
  PAT: ${{ secrets.PAT }}
  TELEGRAM_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  TZ: Asia/Shanghai

jobs:
  build_openwrt:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id  
    runs-on: ubuntu-latest

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [x86-64]
        
    steps:
    
    - name: Checkout
      uses: actions/checkout@main
      with:
          fetch-depth: 0
  
    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/immortalwrt/common/settings.ini"
        if [ -f "immortalwrt/${{matrix.target}}/settings.ini" ]; then
          source "${GITHUB_WORKSPACE}/immortalwrt/${{matrix.target}}/settings.ini"
        fi
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "CONFIG_FILE=${CONFIG_FILE}" >> $GITHUB_ENV
        echo "CUSTOM_SH=${CUSTOM_SH}" >> $GITHUB_ENV
        echo "COMMON_SH=${COMMON_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR_FOR_ARTIFACT=${UPLOAD_BIN_DIR_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_ARTIFACT=${UPLOAD_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT=${UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT=${UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_IPK_FOR_ARTIFACT=${UPLOAD_IPK_FOR_ARTIFACT}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE_FOR_RELEASE=${UPLOAD_FIRMWARE_FOR_RELEASE}" >> $GITHUB_ENV
    
    - name: Get current date
      id: date
      run: |
        echo "date=$(date +'%Y.%m.%d')" >> $GITHUB_ENV  
    
    - name: Initialization environment
      env:
          DEBIAN_FRONTEND: noninteractive
      run: |
          sudo -E apt-get -qq update
          sudo -E apt-get -qq install build-essential clang llvm flex g++ gawk gcc-multilib gettext \
          git libncurses5-dev libssl-dev python3 python3-pyelftools python3-setuptools \
          libpython3-dev rsync unzip zlib1g-dev swig aria2 jq subversion qemu-utils ccache rename \
          libelf-dev device-tree-compiler libgnutls28-dev coccinelle libgmp3-dev libmpc-dev
          sudo -E apt-get -qq purge azure-cli ghc* zulu* firefox powershell openjdk* dotnet* google* mysql* php* android*
          sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
          sudo -E apt-get -qq autoremove --purge
          sudo -E apt-get -qq clean
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          df -h
    
    - name: Clone source code
      run: |
        git clone --depth 1 $REPO_URL -b $REPO_BRANCH OpenWrt
    
    
    - name: Load && Update feeds
      run: |
        [ -n "$(ls -A "immortalwrt/common/files/" 2>/dev/null)" ] && cp -rf "immortalwrt/common/files/"* OpenWrt/
        cd OpenWrt
        ./scripts/feeds update -a

    - name: Free up disk space
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo mkdir -p -m 777 /mnt/openwrt/dl /mnt/openwrt/bin /mnt/openwrt/staging_dir /mnt/openwrt/build_dir
        ln -sf /mnt/openwrt/dl openwrt/dl
        ln -sf /mnt/openwrt/bin openwrt/bin
        ln -sf /mnt/openwrt/staging_dir openwrt/staging_dir
        ln -sf /mnt/openwrt/build_dir openwrt/build_dir
    
    - name: Load custom configuration
      run: |
        cp -rf immortalwrt OpenWrt/
        cd OpenWrt
        chmod +x immortalwrt/common/$ADD_SH
        /bin/bash immortalwrt/common/$ADD_SH
        if [ -f "immortalwrt/${{matrix.target}}/$DIY_SH" ]; then
          chmod +x immortalwrt/${{matrix.target}}/$DIY_SH
          /bin/bash immortalwrt/${{matrix.target}}/$DIY_SH
        fi
        mv immortalwrt/common/$CONFIG_FILE .config
        if [ -f "immortalwrt/${{matrix.target}}/$CONFIG_FILE" ]; then
          echo >> .config
          cat immortalwrt/${{matrix.target}}/$CONFIG_FILE >> .config
        fi
    
    - name: Apply patches
      run: |
        cd OpenWrt
        if [ "$(find "immortalwrt/common/patches" -type f -name '*.patch' -print -quit)" ]; then  
          find "immortalwrt/common/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"
        fi  
        if [ -n "$(ls -A "immortalwrt/${{matrix.target}}/patches" 2>/dev/null)" ]; then  
          find "immortalwrt/${{matrix.target}}/patches" -type f -name '*.patch' -print0 | sort -z | xargs -I % -t -0 -n 1 sh -c "cat '%'  | patch -d './' -p1 -E --forward --no-backup-if-mismatch"  
        fi  

    - name: Download package
      id: package
      run: |
        cd OpenWrt
        make defconfig
        make download -j16
        df -h
    
    - name: Compile the firmware
      id: compile
      run: |
        cd OpenWrt
        echo -e "$(($(nproc)+1)) thread compile"
        make -j$(($(nproc)+1)) || make -j1 V=s
        echo "=============================================="
        echo "Space usage:"
        echo "=============================================="
        df -h
        echo "=============================================="
        du -h --max-depth=1 ./staging_dir
        du -h --max-depth=1 ./build_dir
        du -h --max-depth=1 ./bin
        du -h --max-depth=1 ./dl
      
    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: env.UPLOAD_BIN_DIR_FOR_ARTIFACT == 'true'
      with:
        name: OpenWrt_bin_${{matrix.target}}
        path: OpenWrt/bin

    - name: Organize files
      id: organize
      run: |
        mkdir firmware && find OpenWrt/bin/targets/*/*/ -maxdepth 1 \
        -name "*combined*" \
        -or -name "*sysupgrade*" \
        -or -name "*armvirt-64-default-rootfs*" \
        -or -name "sha256sums" \
        | xargs -i mv -f {} ./firmware/
        cp OpenWrt/.config  ./firmware/${{matrix.target}}.config
        cd firmware
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Upload firmware for release
      uses: softprops/action-gh-release@v1
      continue-on-error: true
      if: env.REPO_TOKEN && env.UPLOAD_FIRMWARE_FOR_RELEASE == 'true'
      env:
        GITHUB_TOKEN: ${{ secrets.REPO_TOKEN }}
      with:
        files: "${{ env.FIRMWARE }}/*"
        name: ${{ env.date }} ${{matrix.target}} ${{ env.EMOJI }}
        tag_name: ${{ env.date }}_${{matrix.target}}
        body_path: ${{ env.FIRMWARE }}/release.txt

    - name: Upload firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date }} ${{matrix.target}}
        path: |
          ${{ env.FIRMWARE }}/*squashfs*
          !${{ env.FIRMWARE }}/*efi*
          !${{ env.FIRMWARE }}/*rootfs*
    
    - name: Upload EFI firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_EFI_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date }} ${{matrix.target}}_EFI
        path: ${{ env.FIRMWARE }}/*efi*
        
    - name: Upload ISO firmware for artifact
      uses: actions/upload-artifact@main
      continue-on-error: true
      if: env.UPLOAD_ISO_FIRMWARE_FOR_ARTIFACT == 'true'
      with:
        name: ${{ env.date }} ${{matrix.target}}_ISO
        path: ${{ env.FIRMWARE }}/*.iso
    
    - name: WeChat notification
      continue-on-error: true
      if: env.SCKEY
      run: |
        curl https://sc.ftqq.com/${{ secrets.SCKEY }}.send?text=OpenWrt_${{ env.date }}_${{matrix.target}}_ImmortalwrtÁºñËØëÂÆåÊàê
    
    - name: Telegram notification
      if: env.TELEGRAM_TOKEN && ! contains(github.event.action, 'notg')
      continue-on-error: true
      run: |
        curl -k --data chat_id="${{ secrets.TELEGRAM_CHAT_ID }}" --data "text=OpenWrt_${{ env.date }}_${{matrix.target}}_ImmortalwrtÁºñËØëÂÆåÊàêüòã" "https://api.telegram.org/bot${{ secrets.TELEGRAM_TOKEN }}/sendMessage"
